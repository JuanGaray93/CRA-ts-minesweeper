{"version":3,"sources":["Redux/reducers/board/board-interfaces.ts","Components/Background/Background.tsx","Constants/BoardDimensions.ts","Redux/AppState.ts","Redux/reducers/board/board.ts","Redux/reducers/game/game-interfaces.ts","Redux/reducers/game/game.ts","Redux/reducers/game/events.ts","Components/Square/Square.tsx","Redux/reducers/board/events.ts","Components/SquareRow/SquareRow.tsx","Components/Board/Board.tsx","App.tsx","serviceWorker.ts","Redux/store.js","index.tsx"],"names":["SquareContent","SquareState","Background","children","className","SLICE_IDENTIFIERS","BOARD_DIMENSIONS","GameStatus","isValidSquareIndex","i","j","getMinesAroundSquare","board","index","minesAmount","iIndex","jIndex","content","Mine","createSlice","name","initialState","squares","allSquares","push","Nothing","state","Unclicked","surroundingBombs","shuffle","matrix","arr","pop","getRandomMatrix","reducers","clickSquare","payload","square","Flagged","Clicked","uncoverSafeSquares","filter","forEach","surrIndex","toggleFlag","selectors","BOARD","game","gameStatus","Playing","loseGame","Lost","winGame","Won","GAME","checkVictory","dispatch","getState","a","squareRow","actions","classnamesByContent","connect","ownProps","gameSelectors","onClick","rowIndex","colIndex","squareMatrix","onRightClick","uncoveredState","contentToShow","minesAroundSquare","String","getThingToShow","minesAround","fullClassname","squareState","getClassnameByContentToShow","type","disabled","onContextMenu","e","preventDefault","SquareRow","row","map","key","boardSquares","useState","mouseIsBeingPressed","setMouseIsBeingPressed","statusIndicator","getStatusIndicator","onMouseDown","onMouseUp","App","Boolean","window","location","hostname","match","store","configureStore","reducer","combineReducers","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAAYA,EAKAC,E,gCCMGC,G,YAJI,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,yBAAKC,UAAU,cAAcD,K,kDDRnBH,O,qBAAAA,I,gBAAAA,M,cAKAC,O,qBAAAA,I,yBAAAA,I,sBAAAA,M,KELL,ICGKI,EDHCC,EACL,GADKA,EAEL,GAFKA,EAGE,I,SCAHD,O,iBAAAA,I,gBAAAA,M,KCWZ,ICdYE,EDoBNC,EAAqB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,EAAGC,EAA2C,EAA3CA,EAC/B,OACED,GAAK,GAAKC,GAAK,GAAKD,EAAIH,GAAyBI,EAAIJ,GAInDK,EAAuB,SAC3BC,EACAC,GAGA,IADA,IAAIC,EAAc,EACTL,GAAa,EAAGA,EAAI,EAAGA,IAC9B,IAAK,IAAIC,GAAa,EAAGA,EAAI,EAAGA,IAAK,CACnC,GAAIF,EAAmB,CAAEC,EAAGI,EAAME,OAASN,EAAGC,EAAGG,EAAMG,OAASN,IAC/CE,EAAMC,EAAME,OAASN,GAAGI,EAAMG,OAASN,GAC3CO,UAAYjB,EAAckB,MACnCJ,IAKR,OAAOA,GAsEIF,EAAQO,YAAY,CAC/BC,KArCiB,QAsCjBC,aAAc,CACZC,QAtEoB,WAEtB,IADA,IAAIC,EAA4B,GACvBd,EAAI,EAAGA,EAAIH,EAAwBA,EAAuBG,IACjEc,EAAWC,KAjCyB,CACtCP,QAASjB,EAAcyB,QACvBC,MAAOzB,EAAY0B,UACnBC,iBAAkB,IAgClB,IAAK,IAAIlB,EAAI,EAAGA,EAAIJ,EAA8BI,IAChDa,EAAWb,GAAGO,QAAUjB,EAAckB,KAExCK,EAAaM,IAAQN,GAErB,IADA,IAAMO,EAAuB,GACpBrB,EAAI,EAAGA,EAAIH,EAAuBG,IAAK,CAE9C,IADA,IAAMsB,EAAiB,GACdrB,EAAI,EAAGA,EAAIJ,EAAuBI,IACzCqB,EAAIP,KAAKD,EAAWS,OAEtBF,EAAON,KAAKO,GAGd,IAAK,IAAItB,EAAI,EAAGA,EAAIH,EAAuBG,IACzC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAuBI,IAAK,CAC/BoB,EAAOrB,GAAGC,GAClBkB,iBAAmBjB,EAAqBmB,EAAQ,CACrDf,OAAQN,EACRO,OAAQN,IAKd,OAAOoB,EA0CIG,IAEXC,SAAU,CACRC,YAAa,SAACT,EAAD,GAA+D,IAAzCU,EAAwC,EAAxCA,QACzBd,EAAYI,EAAZJ,QACFe,EAASf,EAAQc,EAAQrB,QAAQqB,EAAQpB,QAC3CqB,EAAOX,QAAUzB,EAAYqC,UAC/BD,EAAOX,MAAQzB,EAAYsC,QACK,IAA5BF,EAAOT,kBA7CQ,SAArBY,EAAsB3B,EAAoBiB,GAC9C,GAAKtB,EAAmB,CAAEC,EAAGI,EAAME,OAAQL,EAAGG,EAAMG,SAApD,CACA,IAAMqB,EAASP,EAAOjB,EAAME,QAAQF,EAAMG,QAE1C,GADAqB,EAAOX,MAAQzB,EAAYsC,QACK,IAA5BF,EAAOT,iBACsC,CAC7C,CACEb,OAAQF,EAAME,OAAS,EACvBC,OAAQH,EAAMG,QAEhB,CACED,OAAQF,EAAME,OAAS,EACvBC,OAAQH,EAAMG,QAEhB,CACED,OAAQF,EAAME,OACdC,OAAQH,EAAMG,OAAS,GAEzB,CACED,OAAQF,EAAME,OACdC,OAAQH,EAAMG,OAAS,IAEzByB,QAAO,gBAAG1B,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAX,OACPR,EAAmB,CAAEC,EAAGM,EAAQL,EAAGM,OAElB0B,SAAQ,SAACC,GACXb,EAAOa,EAAU5B,QAAQ4B,EAAU3B,QACvCU,QAAUzB,EAAYsC,SAC/BC,EAAmBG,EAAWb,OAkB5BU,CAAmBJ,EAASd,KAIlCsB,WAAY,SAAClB,EAAD,GAA+D,IAAzCU,EAAwC,EAAxCA,QAE1BC,EADcX,EAAZJ,QACec,EAAQrB,QAAQqB,EAAQpB,QAC3CqB,EAAOX,QAAUzB,EAAYqC,QAC/BD,EAAOX,MAAQzB,EAAY0B,UAClBU,EAAOX,QAAUzB,EAAY0B,YACtCU,EAAOX,MAAQzB,EAAYqC,aAMtBO,EACJ,SAACnB,GACN,OAAOA,EAAMrB,EAAkByC,OAAOxB,SAF7BuB,EAIH,SAACnB,GAAD,OAAqB,SAACb,GAAD,OAC3Ba,EAAMrB,EAAkByC,OAAOxB,QAAQT,EAAME,QAAQF,EAAMG,W,SChJnDT,O,eAAAA,I,qBAAAA,I,cAAAA,M,KCIZ,IAEawC,EAAO5B,YAAY,CAC9BC,KAHiB,OAIjBC,aAAc,CACZ2B,WAAYzC,EAAW0C,SAEzBf,SAAU,CACRgB,SAAU,SAACxB,GACTA,EAAMsB,WAAazC,EAAW4C,MAEhCC,QAAS,SAAC1B,GACRA,EAAMsB,WAAazC,EAAW8C,QAKvBR,EACE,SAACnB,GACZ,OAAOA,EAAMrB,EAAkBiD,MAAMN,aAAezC,EAAW4C,MAFtDN,EAIC,SAACnB,GACX,OAAOA,EAAMrB,EAAkBiD,MAAMN,Y,oDCT5BO,EAAe,SAAC3C,GAAD,8CAAyB,WACnD4C,EACAC,GAFmD,yBAAAC,EAAA,0DAInCb,EAAsBY,KAJa,+DAO7B7C,GAP6B,yDAO1C+C,EAP0C,sBAQ9BA,GAR8B,8DAQxCtB,EARwC,SAUtCpB,UAAYjB,EAAcyB,SACjCY,EAAOX,QAAUzB,EAAYsC,QAXgB,2VAiB5CiB,EAAST,EAAKa,QAAQR,YAjBsB,6EAAzB,yDCgEtBS,EAEF,CACF,EAAK,OACL,EAAK,QACL,EAAK,MACL,EAAK,WACL,EAAK,WACL,EAAK,aACL,EAAK,SACL,EAAK,SAiEQC,eAjGS,SAACpC,EAAiBqC,GAAlB,MAA0C,CAChEf,WAAYgB,EAAyBtC,OAtBZ,SACzB8B,GADyB,MAEN,CACnBS,QAAS,YAAiD,ICpC3BpD,EDoCnBqD,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SACpBX,GCrC6B3C,EDsCV,CACfE,OAAQmD,EACRlD,OAAQmD,GCxCgB,uCAAwB,WACtDX,EACAC,GAFsD,iBAAAC,EAAA,0DAIhDrB,EAASQ,EAAiBY,IAAjBZ,CAA6BhC,IACrBa,QAAUzB,EAAYqC,QALS,iDAOtDkB,EAAS5C,EAAMgD,QAAQzB,YAAYtB,IACnBwB,EAAOpB,UAAYjB,EAAckB,MACpCsC,EFNS,uCAAM,WAAOA,GAAP,SAAAE,EAAA,sDAC5BF,EAAST,EAAKa,QAAQV,YADM,2CAAN,uDEOhBkB,EAAevB,EAAgBY,KACrCD,EAASD,EAAaa,IAXgC,2CAAxB,2DD4C9BC,aAAc,YAAiD,IC9B5BxD,ED8BlBqD,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,SACzBX,GC/BiC3C,EDgCV,CACnBE,OAAQmD,EACRlD,OAAQmD,GClCoB,uCAAwB,WAC1DX,GAD0D,SAAAE,EAAA,sDAG1DF,EAAS5C,EAAMgD,QAAQhB,WAAW/B,IAHwB,2CAAxB,4DDyIrBiD,EA9CA,SAAC,GASF,IARZG,EAQW,EARXA,QACAI,EAOW,EAPXA,aACApD,EAMW,EANXA,QACAqD,EAKW,EALXA,eACAJ,EAIW,EAJXA,SACAC,EAGW,EAHXA,SACAnB,EAEW,EAFXA,WAGMuB,EAzDe,SAAC,GAQT,IAPbtD,EAOY,EAPZA,QACAqD,EAMY,EANZA,eACAE,EAKY,EALZA,kBAMA,GAAIF,IAAmBrE,EAAY0B,UAAW,MAAO,GACrD,GAAI2C,IAAmBrE,EAAYqC,QAAS,MAAO,eACnD,GAAIgC,IAAmBrE,EAAYsC,QAAS,CAC1C,GAAItB,IAAYjB,EAAckB,KAAM,MAAO,eAC3C,GAAID,IAAYjB,EAAcyB,QAAS,OAAOgD,OAAOD,GAEvD,MAAO,GA0CeE,CAAe,CACnCzD,UACAqD,iBACAE,kBAJS,EADXG,cAOMC,EAAa,iBA/Be,SAAC,GAM9B,IALL3D,EAKI,EALJA,QACA4D,EAII,EAJJA,YAKA,OAAIA,IAAgB5E,EAAYsC,QACxB,WAAN,OAAkBsB,EAAoB5C,IAAY,IAEhD4D,IAAgB5E,EAAYqC,QAAgB,UACzC,GAoByBwC,CAA4B,CAC1D7D,QAASsD,EACTM,YAAaP,KAGf,OACE,4BACES,KAAK,SACL3E,UAAWwE,EACXI,SACEV,IAAmBrE,EAAYsC,SAAWS,IAAezC,EAAW4C,KAEtEc,QAAS,kBACPA,EAAQ,CACNC,WACAC,cAGJc,cAAe,SAACC,GACdA,EAAEC,iBACFd,EAAa,CACXH,WACAC,eAIHI,ME5HQa,EAjBG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,IAAKnB,EAAsB,EAAtBA,SACxB,OACE,yBAAK9D,UAAU,aACZiF,EAAIC,KAAI,SAACjD,EAAQxB,GAAT,OACP,kBAAC,EAAD,CACE0E,IAAK1E,EACLI,QAASoB,EAAOpB,QAChBqD,eAAgBjC,EAAOX,MACvBiD,YAAatC,EAAOT,iBACpBsC,SAAUA,EACVC,SAAUtD,SCgCLiD,eArCS,SAACpC,GAAD,MAAsB,CAC5C8D,aAAc3C,EAAgBnB,GAC9BsB,WAAYgB,EAAyBtC,MAmCxBoC,EAtBD,SAAC,GAAyC,IAAvC0B,EAAsC,EAAtCA,aAAcxC,EAAwB,EAAxBA,WAAwB,EACCyC,oBAAS,GADV,mBAC9CC,EAD8C,KACzBC,EADyB,KAE/CC,EAZmB,SACzB5C,EACA0C,GAEA,OAAI1C,IAAezC,EAAW4C,KAAa,eACvCH,IAAezC,EAAW8C,IAAY,eACtCqC,EAA4B,eACzB,eAKiBG,CAAmB7C,EAAY0C,GACvD,OACE,yBACEtF,UAAU,QACV0F,YAAa,SAACZ,GACZS,GAAuB,IAEzBI,UAAW,kBAAMJ,GAAuB,KAExC,4BAAQvF,UAAU,eAChB,wBAAIA,UAAU,aAAd,eACCwF,GATL,OAWGJ,QAXH,IAWGA,OAXH,EAWGA,EAAcF,KAAI,SAACD,EAAKxE,GAAN,OACjB,kBAAC,EAAD,CAAW0E,IAAK1E,EAAOwE,IAAKA,EAAKnB,SAAUrD,W,MCjCpCmF,MARf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCbOC,EAAQC,YAAe,CAClCC,QAASC,aAAe,mBACrBpG,EAAkByC,MAAQlC,EAAM4F,SADX,cAErBnG,EAAkBiD,KAAOP,EAAKyD,SAFT,MCE1BE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SF6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8e757fb.chunk.js","sourcesContent":["export enum SquareContent {\n  Nothing,\n  Mine,\n}\n\nexport enum SquareState {\n  Clicked,\n  Unclicked,\n  Flagged,\n}\n\nexport interface SquareIndex {\n  iIndex: number;\n  jIndex: number;\n}\n\nexport interface Square {\n  content: SquareContent;\n  state: SquareState;\n  surroundingBombs: number;\n}\n\nexport type SquareRow = Array<Square>;\n\nexport type SquareMatrix = Array<SquareRow>;\n\nexport interface BoardState {\n  squares: SquareMatrix;\n}\n","import React from \"react\";\nimport \"./Background.scss\";\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nconst Background = ({ children }: Props) => (\n  <div className=\"Background\">{children}</div>\n);\n\nexport default Background;\n","export const BOARD_DIMENSIONS = {\n  ROWS: 10,\n  COLS: 10,\n  TOTAL_MINES: 10,\n};\n","import { BoardState } from \"./reducers/board/board-interfaces\";\nimport { GameState } from \"./reducers/game/game-interfaces\";\n\nexport enum SLICE_IDENTIFIERS {\n  BOARD,\n  GAME,\n}\n\nexport interface AppState {\n  [SLICE_IDENTIFIERS.BOARD]: BoardState;\n  [SLICE_IDENTIFIERS.GAME]: GameState;\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport shuffle from \"lodash.shuffle\";\nimport {\n  SquareMatrix,\n  BoardState,\n  SquareIndex,\n  SquareState,\n  SquareContent,\n  Square,\n  SquareRow,\n} from \"./board-interfaces\";\nimport { BOARD_DIMENSIONS } from \"../../../Constants/BoardDimensions\";\nimport { AppState, SLICE_IDENTIFIERS } from \"../../AppState\";\n\nconst getInitialSquare = (): Square => ({\n  content: SquareContent.Nothing,\n  state: SquareState.Unclicked,\n  surroundingBombs: 0,\n});\n\nconst isValidSquareIndex = ({ i, j }: { i: number; j: number }): boolean => {\n  return (\n    i >= 0 && j >= 0 && i < BOARD_DIMENSIONS.ROWS && j < BOARD_DIMENSIONS.COLS\n  );\n};\n\nconst getMinesAroundSquare = (\n  board: SquareMatrix,\n  index: SquareIndex\n): number => {\n  let minesAmount = 0;\n  for (let i: number = -1; i < 2; i++) {\n    for (let j: number = -1; j < 2; j++) {\n      if (isValidSquareIndex({ i: index.iIndex + i, j: index.jIndex + j })) {\n        const square = board[index.iIndex + i][index.jIndex + j];\n        if (square.content === SquareContent.Mine) {\n          minesAmount++;\n        }\n      }\n    }\n  }\n  return minesAmount;\n};\n\nconst getRandomMatrix = (): SquareMatrix => {\n  let allSquares: Array<Square> = [];\n  for (let i = 0; i < BOARD_DIMENSIONS.ROWS * BOARD_DIMENSIONS.COLS; i++) {\n    allSquares.push(getInitialSquare());\n  }\n  for (let j = 0; j < BOARD_DIMENSIONS.TOTAL_MINES; j++) {\n    allSquares[j].content = SquareContent.Mine;\n  }\n  allSquares = shuffle(allSquares);\n  const matrix: SquareMatrix = [];\n  for (let i = 0; i < BOARD_DIMENSIONS.ROWS; i++) {\n    const arr: SquareRow = [];\n    for (let j = 0; j < BOARD_DIMENSIONS.COLS; j++) {\n      arr.push(allSquares.pop() as Square);\n    }\n    matrix.push(arr);\n  }\n\n  for (let i = 0; i < BOARD_DIMENSIONS.ROWS; i++) {\n    for (let j = 0; j < BOARD_DIMENSIONS.COLS; j++) {\n      const square = matrix[i][j];\n      square.surroundingBombs = getMinesAroundSquare(matrix, {\n        iIndex: i,\n        jIndex: j,\n      });\n    }\n  }\n\n  return matrix;\n};\n\nconst SLICE_NAME = \"board\";\n\nconst uncoverSafeSquares = (index: SquareIndex, matrix: SquareMatrix): void => {\n  if (!isValidSquareIndex({ i: index.iIndex, j: index.jIndex })) return;\n  const square = matrix[index.iIndex][index.jIndex];\n  square.state = SquareState.Clicked;\n  if (square.surroundingBombs === 0) {\n    const surroundingIndices: Array<SquareIndex> = [\n      {\n        iIndex: index.iIndex + 1,\n        jIndex: index.jIndex,\n      },\n      {\n        iIndex: index.iIndex - 1,\n        jIndex: index.jIndex,\n      },\n      {\n        iIndex: index.iIndex,\n        jIndex: index.jIndex + 1,\n      },\n      {\n        iIndex: index.iIndex,\n        jIndex: index.jIndex - 1,\n      },\n    ].filter(({ iIndex, jIndex }) =>\n      isValidSquareIndex({ i: iIndex, j: jIndex })\n    );\n    surroundingIndices.forEach((surrIndex) => {\n      const surrSq = matrix[surrIndex.iIndex][surrIndex.jIndex];\n      if (surrSq.state !== SquareState.Clicked) {\n        uncoverSafeSquares(surrIndex, matrix);\n      }\n    });\n  }\n};\n\nexport const board = createSlice({\n  name: SLICE_NAME,\n  initialState: {\n    squares: getRandomMatrix(),\n  },\n  reducers: {\n    clickSquare: (state: BoardState, { payload }: { payload: SquareIndex }) => {\n      const { squares } = state;\n      const square = squares[payload.iIndex][payload.jIndex];\n      if (square.state !== SquareState.Flagged) {\n        square.state = SquareState.Clicked;\n        if (square.surroundingBombs === 0) {\n          uncoverSafeSquares(payload, squares);\n        }\n      }\n    },\n    toggleFlag: (state: BoardState, { payload }: { payload: SquareIndex }) => {\n      const { squares } = state;\n      const square = squares[payload.iIndex][payload.jIndex];\n      if (square.state === SquareState.Flagged) {\n        square.state = SquareState.Unclicked;\n      } else if (square.state === SquareState.Unclicked) {\n        square.state = SquareState.Flagged;\n      }\n    },\n  },\n});\n\nexport const selectors = {\n  board: (state: AppState) => {\n    return state[SLICE_IDENTIFIERS.BOARD].squares;\n  },\n  square: (state: AppState) => (index: SquareIndex) =>\n    state[SLICE_IDENTIFIERS.BOARD].squares[index.iIndex][index.jIndex],\n};\n","export enum GameStatus {\n  Lost,\n  Playing,\n  Won,\n}\n\nexport interface GameState {\n  gameStatus: GameStatus;\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { GameState, GameStatus } from \"./game-interfaces\";\nimport { AppState, SLICE_IDENTIFIERS } from \"../../AppState\";\n\nconst SLICE_NAME = \"game\";\n\nexport const game = createSlice({\n  name: SLICE_NAME,\n  initialState: {\n    gameStatus: GameStatus.Playing,\n  },\n  reducers: {\n    loseGame: (state: GameState) => {\n      state.gameStatus = GameStatus.Lost;\n    },\n    winGame: (state: GameState) => {\n      state.gameStatus = GameStatus.Won;\n    },\n  },\n});\n\nexport const selectors = {\n  gameWasLost: (state: AppState) => {\n    return state[SLICE_IDENTIFIERS.GAME].gameStatus === GameStatus.Lost;\n  },\n  gameStatus: (state: AppState) => {\n    return state[SLICE_IDENTIFIERS.GAME].gameStatus;\n  },\n};\n","import { game } from \"./game\";\nimport {\n  SquareMatrix,\n  SquareContent,\n  SquareState,\n} from \"../board/board-interfaces\";\nimport { selectors } from \"./game\";\n\nexport const loseGame = () => async (dispatch: Function) => {\n  dispatch(game.actions.loseGame());\n};\n\nexport const startOver = () => async () => {\n  // todo\n  return null;\n};\n\nexport const checkVictory = (board: SquareMatrix) => async (\n  dispatch: Function,\n  getState: Function\n) => {\n  const hasLost = selectors.gameWasLost(getState());\n  if (hasLost) return;\n\n  for (let squareRow of board) {\n    for (let square of squareRow) {\n      if (\n        square.content === SquareContent.Nothing &&\n        square.state !== SquareState.Clicked\n      ) {\n        return;\n      }\n    }\n  }\n  return dispatch(game.actions.winGame());\n};\n","import React from \"react\";\nimport {\n  SquareState,\n  SquareContent,\n} from \"../../Redux/reducers/board/board-interfaces\";\nimport \"./Square.scss\";\nimport {\n  squareWasClicked,\n  squareFlagWasToggled,\n} from \"../../Redux/reducers/board/events\";\nimport { selectors as gameSelectors } from \"../../Redux/reducers/game/game\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../Redux/AppState\";\nimport { ThunkDispatch, AnyAction } from \"@reduxjs/toolkit\";\nimport { GameStatus } from \"../../Redux/reducers/game/game-interfaces\";\n\ninterface SquareCoords {\n  rowIndex: number;\n  colIndex: number;\n}\n\ninterface OwnProps {\n  content: SquareContent;\n  uncoveredState: SquareState;\n  rowIndex: number;\n  colIndex: number;\n  minesAround: number;\n}\n\ninterface DispatchProps {\n  onClick: (coords: SquareCoords) => void;\n  onRightClick: (coords: SquareCoords) => void;\n}\n\ninterface StateProps {\n  gameStatus: GameStatus;\n}\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<AppState, {}, AnyAction>\n): DispatchProps => ({\n  onClick: ({ rowIndex, colIndex }: SquareCoords): void => {\n    dispatch(\n      squareWasClicked({\n        iIndex: rowIndex,\n        jIndex: colIndex,\n      })\n    );\n  },\n  onRightClick: ({ rowIndex, colIndex }: SquareCoords): void => {\n    dispatch(\n      squareFlagWasToggled({\n        iIndex: rowIndex,\n        jIndex: colIndex,\n      })\n    );\n  },\n});\n\nconst mapStateToProps = (state: AppState, ownProps: OwnProps) => ({\n  gameStatus: gameSelectors.gameStatus(state),\n});\n\nconst getThingToShow = ({\n  content,\n  uncoveredState,\n  minesAroundSquare,\n}: {\n  content: SquareContent;\n  uncoveredState: SquareState;\n  minesAroundSquare: number;\n}): string => {\n  if (uncoveredState === SquareState.Unclicked) return \"\";\n  if (uncoveredState === SquareState.Flagged) return \"🚩\";\n  if (uncoveredState === SquareState.Clicked) {\n    if (content === SquareContent.Mine) return \"💣\";\n    if (content === SquareContent.Nothing) return String(minesAroundSquare);\n  }\n  return \"\";\n};\n\nconst classnamesByContent: {\n  [x: string]: string;\n} = {\n  \"1\": \"blue\",\n  \"2\": \"green\",\n  \"3\": \"red\",\n  \"4\": \"darkBlue\",\n  \"5\": \"bordeaux\",\n  \"6\": \"aquamarine\",\n  \"7\": \"violet\",\n  \"8\": \"black\",\n};\n\nconst getClassnameByContentToShow = ({\n  content,\n  squareState,\n}: {\n  content: string;\n  squareState: SquareState;\n}) => {\n  if (squareState === SquareState.Clicked) {\n    return `clicked ${classnamesByContent[content] || \"\"}`;\n  }\n  if (squareState === SquareState.Flagged) return \"flagged\";\n  return \"\";\n};\n\ntype Props = OwnProps & DispatchProps & StateProps;\n\nconst Square = ({\n  onClick,\n  onRightClick,\n  content,\n  uncoveredState,\n  rowIndex,\n  colIndex,\n  gameStatus,\n  minesAround,\n}: Props) => {\n  const contentToShow = getThingToShow({\n    content,\n    uncoveredState,\n    minesAroundSquare: minesAround,\n  });\n  const fullClassname = `Square ${getClassnameByContentToShow({\n    content: contentToShow,\n    squareState: uncoveredState,\n  })}`;\n\n  return (\n    <button\n      type=\"button\"\n      className={fullClassname}\n      disabled={\n        uncoveredState === SquareState.Clicked || gameStatus === GameStatus.Lost\n      }\n      onClick={() =>\n        onClick({\n          rowIndex,\n          colIndex,\n        })\n      }\n      onContextMenu={(e) => {\n        e.preventDefault();\n        onRightClick({\n          rowIndex,\n          colIndex,\n        });\n      }}\n    >\n      {contentToShow}\n    </button>\n  );\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps, AppState>(\n  mapStateToProps,\n  mapDispatchToProps\n)(Square);\n","import { board, selectors } from \"./board\";\nimport { SquareIndex, SquareContent, SquareState } from \"./board-interfaces\";\nimport { AppState } from \"../../AppState\";\nimport { loseGame, checkVictory } from \"../game/events\";\n\nexport const squareWasClicked = (index: SquareIndex) => async (\n  dispatch: Function,\n  getState: () => AppState\n) => {\n  const square = selectors.square(getState())(index);\n  const hasFlag = square.state === SquareState.Flagged;\n  if (hasFlag) return;\n  dispatch(board.actions.clickSquare(index));\n  const hadBomb = square.content === SquareContent.Mine;\n  if (hadBomb) dispatch(loseGame());\n  const squareMatrix = selectors.board(getState());\n  dispatch(checkVictory(squareMatrix));\n};\n\nexport const squareFlagWasToggled = (index: SquareIndex) => async (\n  dispatch: Function\n) => {\n  dispatch(board.actions.toggleFlag(index));\n};\n","import React from \"react\";\nimport { SquareRow as ModelSquareRow } from \"../../Redux/reducers/board/board-interfaces\";\nimport \"./SquareRow.scss\";\nimport Square from \"../Square/Square\";\n\ninterface Props {\n  row: ModelSquareRow;\n  rowIndex: number;\n}\n\nconst SquareRow = ({ row, rowIndex }: Props) => {\n  return (\n    <div className=\"SquareRow\">\n      {row.map((square, index) => (\n        <Square\n          key={index}\n          content={square.content}\n          uncoveredState={square.state}\n          minesAround={square.surroundingBombs}\n          rowIndex={rowIndex}\n          colIndex={index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default SquareRow;\n","import React, { useState } from \"react\";\nimport \"./Board.scss\";\nimport { selectors } from \"../../Redux/reducers/board/board\";\nimport { selectors as gameSelectors } from \"../../Redux/reducers/game/game\";\nimport { SquareMatrix } from \"../../Redux/reducers/board/board-interfaces\";\nimport { connect } from \"react-redux\";\nimport SquareRow from \"../SquareRow/SquareRow\";\nimport { AppState } from \"../../Redux/AppState\";\nimport { GameStatus } from \"../../Redux/reducers/game/game-interfaces\";\n\ninterface Props {\n  boardSquares: SquareMatrix;\n  gameStatus: GameStatus;\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  boardSquares: selectors.board(state),\n  gameStatus: gameSelectors.gameStatus(state),\n});\n\nconst getStatusIndicator = (\n  gameStatus: GameStatus,\n  mouseIsBeingPressed: boolean\n) => {\n  if (gameStatus === GameStatus.Lost) return \"😵\";\n  if (gameStatus === GameStatus.Won) return \"😎\";\n  if (mouseIsBeingPressed) return \"😮\";\n  return \"🙂\";\n};\n\nconst Board = ({ boardSquares, gameStatus }: Props) => {\n  const [mouseIsBeingPressed, setMouseIsBeingPressed] = useState(false);\n  const statusIndicator = getStatusIndicator(gameStatus, mouseIsBeingPressed);\n  return (\n    <div\n      className=\"Board\"\n      onMouseDown={(e) => {\n        setMouseIsBeingPressed(true);\n      }}\n      onMouseUp={() => setMouseIsBeingPressed(false)}\n    >\n      <header className=\"BoardHeader\">\n        <h5 className=\"GameTitle\">MINESWEEPER</h5>\n        {statusIndicator}\n      </header>\n      {boardSquares?.map((row, index) => (\n        <SquareRow key={index} row={row} rowIndex={index} />\n      ))}\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps)(Board);\n","import React from \"react\";\nimport Background from \"./Components/Background/Background\";\nimport Board from \"./Components/Board/Board\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Background>\n      <Board />\n    </Background>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { board } from \"./reducers/board/board\";\nimport { SLICE_IDENTIFIERS } from \"./AppState\";\nimport { game } from \"./reducers/game/game\";\n\nexport const store = configureStore({\n  reducer: combineReducers({\n    [SLICE_IDENTIFIERS.BOARD]: board.reducer,\n    [SLICE_IDENTIFIERS.GAME]: game.reducer,\n  }),\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./Redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}